from typing import List, Dict
# üêç –ò–∑—É—á–∞–µ–º: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
# –ü–æ—Å–∫–æ–ª—å–∫—É config_example.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –ø–∞–∫–µ—Ç–∞ src, 
# –∞ –∑–∞–ø—É—Å–∫–∞—Ç—å –º—ã –±—É–¥–µ–º –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞, Python –Ω–∞–π–¥–µ—Ç –µ–≥–æ.
# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: python -m src.bot
from config_example import MAX_CONTEXT_MESSAGES


class ContextManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        self.user_contexts: Dict[int, List[str]] = {}
        self.max_messages = MAX_CONTEXT_MESSAGES
    
    def add_message(self, user_id: int, role: str, message: str) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = []
            print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        formatted_message = f"{role.capitalize()}: {message}"
        self.user_contexts[user_id].append(formatted_message)
        
        if len(self.user_contexts[user_id]) > self.max_messages:
            removed = self.user_contexts[user_id].pop(0)
            print(f"üìù –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed[:30]}...")
        
        print(f"üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(self.user_contexts[user_id])} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def get_context(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        """
        if user_id not in self.user_contexts:
            return ""
        
        context = "\n".join(self.user_contexts[user_id])
        return context
    
    def clear_context(self, user_id: int) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.user_contexts:
            message_count = len(self.user_contexts[user_id])
            del self.user_contexts[user_id]
            print(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        else:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –ø—É—Å—Ç")
    
    def get_context_info(self, user_id: int) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_contexts:
            return {"messages": 0, "max_messages": self.max_messages}
        
        return {
            "messages": len(self.user_contexts[user_id]),
            "max_messages": self.max_messages
        }
    
    def get_all_users(self) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        return list(self.user_contexts.keys())


def demo_context_manager():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ContextManager")
    cm = ContextManager()
    user_id = 123
    
    cm.add_message(user_id, "user", "–ü—Ä–∏–≤–µ—Ç!")
    cm.add_message(user_id, "assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    cm.add_message(user_id, "user", "–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?")
    
    context = cm.get_context(user_id)
    print(f"\nüìú –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}")
    
    info = cm.get_context_info(user_id)
    print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}")
    
    cm.clear_context(user_id)
    print(f"\nüìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {cm.get_context_info(user_id)}")


if __name__ == "__main__":
    demo_context_manager() 